/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Anup
 */
public class DatabaseBackup extends javax.swing.JFrame {

    /**
     * Creates new form DatabaseBackup
     */
    public DatabaseBackup() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        jdbBackupButton = new javax.swing.JButton();
        jdbRestoreButton = new javax.swing.JButton();
        jBrowseTextField = new javax.swing.JTextField();
        jBrowseButton = new javax.swing.JButton();
        jPasswordLabel = new javax.swing.JLabel();
        jPasswordField = new javax.swing.JPasswordField();

        jTextField2.setText("jTextField2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jdbBackupButton.setText("Backup");
        jdbBackupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jdbBackupButtonActionPerformed(evt);
            }
        });

        jdbRestoreButton.setText("Restore");
        jdbRestoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jdbRestoreButtonActionPerformed(evt);
            }
        });

        jBrowseButton.setText("Browse");
        jBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBrowseButtonActionPerformed(evt);
            }
        });

        jPasswordLabel.setText("Enter Password:");

        jPasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBrowseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBrowseButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jdbRestoreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jdbBackupButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(33, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBrowseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBrowseButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jdbBackupButton)
                    .addComponent(jdbRestoreButton))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jdbBackupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jdbBackupButtonActionPerformed
        
        char[] password=jPasswordField.getPassword();
        if(password.length!=0&&file!=null&&file.isDirectory())
        {
            String passwordString=new String(password);
            String filePath=file.getAbsolutePath();
            SimpleDateFormat simpleDateFormat=new SimpleDateFormat("d.M.yyyy");
            Date date=Calendar.getInstance().getTime();
            DbBackup dbbackup=new DbBackup();
            boolean status= dbbackup.backupDB("distna", "root",passwordString.trim(), filePath+"\\DISTNA_"+simpleDateFormat.format(date)+".sql");
            if(status)
            {
                JOptionPane.showMessageDialog(this,"Backup created successfully", "Message",JOptionPane.INFORMATION_MESSAGE);
            }
            else
            {
                 JOptionPane.showMessageDialog(this,"Unable to create a backup", "Error",JOptionPane.ERROR_MESSAGE);
            }
            file=null;
            jBrowseTextField.setText("");
            jPasswordField.setText("");
        }
        else
        {
            if(password.length==0)
            {
                JOptionPane.showMessageDialog(this,"Please enter a valid mysql password", "Error",JOptionPane.ERROR_MESSAGE);
            }
            else
            {
             JOptionPane.showMessageDialog(this,"Please select a valid directory.", "Error",JOptionPane.ERROR_MESSAGE);
            }
        }
        //
      
        // TODO add your handling code here:
    }//GEN-LAST:event_jdbBackupButtonActionPerformed

    private void jdbRestoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jdbRestoreButtonActionPerformed
         char[] password=jPasswordField.getPassword();
         if(password.length!=0&&file!=null&&file.exists()&&file.isFile())
        {
          String passwordString=new String(password);
            String filePath=file.getAbsolutePath();
            String extension=filePath.substring(filePath.lastIndexOf("."));
            if(extension.equals(".sql"))
            {
            SimpleDateFormat simpleDateFormat=new SimpleDateFormat("d.M.yyyy");
            Date date=Calendar.getInstance().getTime();
            DbBackup dbbackup=new DbBackup();
           boolean status=dbbackup.restoreDB("distna","root", passwordString.trim(),filePath);         
                 if(status)
                {
                    JOptionPane.showMessageDialog(this,"Backup restored successfully", "Message",JOptionPane.INFORMATION_MESSAGE);
                }
                else
                {
                    JOptionPane.showMessageDialog(this,"Unable to restore", "Error",JOptionPane.ERROR_MESSAGE);
                }
            }
            else
            {
                JOptionPane.showMessageDialog(this,"Please select a valid file.", "Error",JOptionPane.ERROR_MESSAGE);
            }
            jBrowseTextField.setText("");
              jPasswordField.setText("");
            file=null;
        }
         else
         {
             if(file==null)
             {
                 JOptionPane.showMessageDialog(this,"File not selected.", "Message",JOptionPane.INFORMATION_MESSAGE);
             }
         }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jdbRestoreButtonActionPerformed

    private void jBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBrowseButtonActionPerformed
        JFileChooser jFileChooser=new JFileChooser();
        jFileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        jFileChooser.showOpenDialog(this);
        file=jFileChooser.getSelectedFile();
        if(file!=null)
        jBrowseTextField.setText(file.getAbsolutePath());
        // TODO add your handling code here:
    }//GEN-LAST:event_jBrowseButtonActionPerformed

    private void jPasswordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPasswordFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DatabaseBackup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DatabaseBackup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DatabaseBackup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DatabaseBackup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DatabaseBackup().setVisible(true);
            }
        });
    }
    File file;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBrowseButton;
    private javax.swing.JTextField jBrowseTextField;
    private javax.swing.JPasswordField jPasswordField;
    private javax.swing.JLabel jPasswordLabel;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton jdbBackupButton;
    private javax.swing.JButton jdbRestoreButton;
    // End of variables declaration//GEN-END:variables
}
